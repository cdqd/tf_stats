shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp()
getTFstats <- function() {
webpage <- list()
scrape <- list()
nums <- list()
wins <- list()
for (k in 1:n_players) {
webpage[[k]] <- read_html(url[k])
temp <- character(0)
for (i in 4:20) {
temp[i - 3] <-
html_nodes(webpage[[k]],
paste0("table:nth-child(", i, ")")) %>%
html_text()  %>%
.[length(.)]
}
scrape[[k]] <- temp
wins[[k]] <-
html_nodes(webpage[[k]],
paste0("table:nth-child(", 3, ")")) %>%
html_text() %>% .[2] %>%
regmatches(gregexpr(pattern = "[0-9]+ Gold", text = .)) %>% unlist() %>%
regmatches(gregexpr(pattern = "[0-9]+", text = .)) %>% unlist() %>% as.numeric()
if (k == 1) {
p <- regexpr("[a-z]:|[A-Z]:| :|\\):", scrape[[k]])
stat_name <- c(substr(scrape[[k]], 1, p), "GOLD")
}
nums[[k]] <- c(substring(scrape[[k]], p + 2), wins[[k]])
}
snapshot <-
data.frame(V1 = stat_name,
V2 = nums[[1]],
stringsAsFactors = F)
if (n_players > 1) {
snapshot[, 3] <- nums[[2]]
}
a <- strsplit(as.character(snapshot[6, -1]), ":")
times <- numeric(0)
for(i in 1:n_players) {
a[[i]] <- as.numeric(a[[i]])
times[i] <- a[[i]][3] + a[[i]][2] * 60 + a[[i]][1]* (60^2)
}
snapshot[-1] <- suppressWarnings(lapply(snapshot[-1], as.numeric))
snapshot[6, -1] <- times
return(snapshot)
}
calc_stats <- function() {
dfs <- list()
for(k in 1:n_players) {
dfs[[k]] <-
data.frame(Player = pn[k],
`Time in seconds` = diff[6, k],
SPM = diff[17, k] / diff[6, k] * 60,
TPM = diff[7, k] / diff[6, k] * 60,
`SPM/TPM ratio` = diff[17, k] / diff[7, k],
`T-spins` = diff[14, k],
Tetrises = diff[11, k],
`Total Combos` = diff[12, k],
B2Bs = diff[15, k],
`T-usage efficiency` = diff[14, k] / (diff[7, k] / 7),
`Singles` = diff[8, k],
`Doubles` = diff[9, k],
`Triples` = diff[10, k],
`Winner` = diff[18, k],
check.names = F)
}
if (n_players > 1) {
return(rbind(dfs[[1]], dfs[[2]]))
} else {
return(dfs[[1]])
}
}
pn <- c("crzy242", "")
n_players <- sum(pn != "")
t1 <- data.frame(NULL)
ld <- data.frame(NULL)
fd <- data.frame(NULL)
url <- paste0("http://harddrop.com/file/tfstats.php?username=", pn)
t0 <- getTFstats()
paste0("Initial stats for ", pn[1],
if (pn[2] != "") paste0(" and ", pn[2]),
" loaded.")
t1 <- getTFstats()
diff <- t1[-1] - t0[-1]
if (any(diff[6, ] == 0)) {
diff[6, ] <-
diff[6, ] + as.numeric(diff[6, ] == 0) * input$manual_time
}
ld <- calc_stats()
fd_0 <- rbind(fd,
cbind(ld,
data.frame(game =
if (n_players == 1) {nrow(fd) + 1
} else {
rep((nrow(fd) / 2 + 1), each = 2)}
)))
fd <- fd_0
last <- as.data.frame(t(ld), stringsAsFactors = F)
last$Player <- row.names(last)
names(last) <- (last[1, ])
last <- last[-1, c(length(last), 1:n_players)]
t0 <- t1
if (nrow(ld) == 0) {
return(NULL)
} else return(last)
output$summary_output <- renderTable({
if (nrow(fd) == 0) {
return(NULL)
} else {
mins <- aggregate(fd[, input$summary_vars], list(Player = fd$Player), min, na.rm = T)
names(mins)[-1] <-
if (length(input$summary_vars) == 1) {
paste0("Min ", input$summary_vars)
} else paste0("Min ", names(mins)[-1])
means <- aggregate(fd[, input$summary_vars], list(Player = fd$Player), mean, na.rm = T)
names(means)[-1] <-
if (length(input$summary_vars) == 1) {
paste0("Mean ", input$summary_vars)
} else paste0("Mean ", names(means)[-1])
maxs <- aggregate(fd[, input$summary_vars], list(Player = fd$Player), max, na.rm = T)
names(maxs)[-1] <-
if (length(input$summary_vars) == 1) {
paste0("Max ", input$summary_vars)
} else paste0("Max ", names(maxs)[-1])
wintot <- aggregate(fd[, "Winner"], list(Player = fd$Player), sum, na.rm = T)
names(wintot)[-1] <- "Wins"
summ <- merge(merge(mins, means), maxs)
summ <- merge(summ, wintot)
summ <- summ[, c(1, length(summ), 2:(length(summ)-1))]
return(
summ[, c(1:2,
2 + order(substring(names(summ)[-(1:2)],
1 + regexpr(" ", names(summ)[-(1:2)]))))]
)
}
}, align = "c")
fd
ld
if (nrow(ld) == 0) {
return(NULL)
} else return(last)
shiny::runApp()
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
sprintf("%f", c(3.4,2.3,6.7))
sprintf("%.2f", c(3.4,2.3,6.7))
sys.time(sprintf("%.2f", c(3.4,2.3,6.7)))
system.time(sprintf("%.2f", c(3.4,2.3,6.7)))
sprintf("%1.f", c(3.4,2.3,6.7))
sprintf("%.1f", c(3.4,2.3,6.7))
sprintf("%.2f", c(3.4,2.3,6.7,1))
sprintf("%.2f", "3.41223")
?weighted.mean
a <- data.frame(xyz = 1:10, zyv = rep(5, times = 10), hhh = 0.4 * 2:11)
a
w <- seq(0.2, 2, length.out = 10)
w
a[, 2:3] * w
numeric(10)
b <0numeric(10)
b <- numeric(10)
b[5] <- 3
b
a / w
d <- list()
d[[1]] <- a
d
do.call(rbind, d)
class(do.call(rbind, d))
d[[2]] <- a*2
class(do.call(rbind, d))
class(do.call(rbind, d))
do.call(rbind, d)
do.call(rbind, d[-1])
rep(1:2, times = 4)
rep(1:2, length.out - 4)
rep(1:2, length.out = 4)
rep(1:2, each = 2)
rep(1:2, times = 2)
?shiny::renderTable
shiny::runApp(launch.browser = T)
shiny::runApp()
shiny::runApp(launch.browser = T)
pn <- c("crzy242")
url <- paste0("http://harddrop.com/file/tfstats.php?username=", pn)
library(rvest)
library(magrittr)
webpage <- list()
webpage[[k]] <- read_html(url[k])
k <- 1
webpage <- list()
webpage[[k]] <- read_html(url[k])
html_nodes(webpage[[k]],
paste0("table:nth-child"))
html_nodes(webpage[[k]],
paste0("table"))
html_nodes(webpage[[k]],
paste0("table")) %>%
html_table()
html_nodes(webpage[[k]],
paste0("table")) %>%
html_nodes("nth-child")
html_nodes(webpage[[k]],
paste0("table")) %>%
html_nodes("width:100%")
html_nodes(webpage[[k]],
paste0("table")) %>%
html_nodes("width:100")
html_nodes(webpage[[k]],
paste0("table:nth-hild()"))
html_nodes(webpage[[k]],
paste0("table:nth-child()"))
